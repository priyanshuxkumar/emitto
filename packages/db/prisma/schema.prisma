// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  name          String?
  email         String
  emailVerified DateTime?
  avatarUrl     String?
  verified      Boolean            @default(false)
  role          UserPermissionRole @default(USER)
  password      Password?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  apikeys       ApiKey[]
  notifications Notification[]
  refreshToken  RefreshToken[]
  feedbacks     Feedback[]

  @@unique([email])
}

model Password {
  id     String @id @default(uuid())
  hash   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  secret    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId Int
  owner  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String    @unique
  apikey     String    @unique() //Hashed form
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  lastUsedAt DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      NotificationType
  category  NotificationCategory
  recipient String // Email address, phone number
  subject   String? // For emails
  message   String // SMS, email body, push notification content
  status    NotificationStatus    @default(PENDING)
  provider  NotificationProvider? // SendGrid, Twilio, Firebase, etc.
  metadata  Json? // Store extra data (response from provider)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  rating    String
  comment   String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationCategory {
  TRANSACTIONAL // OTP, Order Confirmations, Password Reset
  PROMOTIONAL // Marketing, Newsletters, Ads
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum NotificationProvider {
  SENDGRID
  TWILIO
  FIREBASE
  AWS_SES
}

enum UserPermissionRole {
  USER
  ADMIN
}
